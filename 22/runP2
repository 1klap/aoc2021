#!/usr/bin/env ruby
# frozen_string_literal: true

Cuboid = Struct.new(:on, :xmin, :xmax, :ymin, :ymax, :zmin, :zmax) do
  def self.parse(line)
    s0 = line.split ' '
    s1 = s0[1].split(',').map { |val_def| val_def.split('=')[1].split('..').map(&:to_i) }
    Cuboid.new s0[0] == 'on', s1[0][0], s1[0][1], s1[1][0], s1[1][1], s1[2][0], s1[2][1]
  end

  def inside?(x, y, z)
    (x >= xmin) && (x <= xmax) &&
      (y >= ymin) && (y <= ymax) &&
      (z >= zmin) && (z <= zmax)
  end

  def intersection_x(other)
    [xmin, other.xmin].max..[xmax, other.xmax].min
  end

  def intersection_y(other)
    [ymin, other.ymin].max..[ymax, other.ymax].min
  end

  def intersection_z(other)
    [zmin, other.zmin].max..[zmax, other.zmax].min
  end

  def intersect?(other)
    intersection_x(other).size.positive? &&
      intersection_y(other).size.positive? &&
      intersection_z(other).size.positive?
  end

  def clip_inside(other)
    # return 3 to 6 cuboids depending on intersection
    r = []
    ix = intersection_x other
    iy = intersection_y other
    iz = intersection_z other

    r << Cuboid.new(true, xmin, xmax, ymin, ymax, iz.end + 1, zmax) if iz.end < zmax
    r << Cuboid.new(true, xmin, xmax, ymin, ymax, zmin, iz.begin - 1) if iz.begin > zmin
    r << Cuboid.new(true, xmin, xmax, iy.end + 1, ymax, iz.begin, iz.end) if iy.end < ymax
    r << Cuboid.new(true, xmin, xmax, ymin, iy.begin - 1, iz.begin, iz.end) if iy.begin > ymin
    r << Cuboid.new(true, ix.end + 1, xmax, iy.begin, iy.end, iz.begin, iz.end) if ix.end < xmax
    r << Cuboid.new(true, xmin, ix.begin - 1, iy.begin, iy.end, iz.begin, iz.end) if ix.begin > xmin
    r
  end

  def on_count
    if on
      (xmax + 1 - xmin).abs * (ymax + 1 - ymin).abs * (zmax + 1 - zmin).abs
    else 
      0
    end
  end
end

def merge_cuboids(cuboids)
  merged_cuboids = []
  cuboids.each do |cuboid|
    cuboids_to_add = []
    cuboids_to_remove = []
    merged_cuboids.each do |merged_cuboid|
      next unless cuboid.intersect? merged_cuboid

      # puts "intersection: #{cuboid} with #{merged_cuboid}"
      cuboids_to_remove << merged_cuboid
      # calc intersecting cuboids into inside and outside
      # drop inside intersection
      # add outside to cuboids_to_add
      cuboids_to_add += merged_cuboid.clip_inside(cuboid)
    end
    cuboids_to_add << cuboid if cuboid.on
    merged_cuboids -= cuboids_to_remove
    merged_cuboids += cuboids_to_add
  end
  merged_cuboids
end

input_lines = File.readlines 'input/data.txt'
cuboids = input_lines.map do |line|
  Cuboid.parse line
end

all_cuboids = merge_cuboids cuboids
# puts all_cuboids.inspect
puts all_cuboids.map(&:on_count).sum
