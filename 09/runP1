#!/usr/bin/env ruby
# frozen_string_literal: true

class HeightMap
  attr_accessor :height_array, :col_count, :row_count

  def initialize(height_array, col_count, row_count)
    @height_array = height_array
    @col_count = col_count
    @row_count = row_count
  end

  def self.parse(input_lines)
    height_array = input_lines.join.chars.map(&:to_i)
    col_count = input_lines[0].size
    row_count = input_lines.size
    HeightMap.new(height_array, col_count, row_count)
  end

  def height_at(x, y)
    return nil if x.negative? || x >= col_count
    return nil if y.negative? || y >= row_count

    height_array[y * col_count + x]
  end

  def low_point?(x, y)
    self_height = height_at x, y
    top = height_at x, (y + 1)
    right = height_at (x + 1), y
    bottom = height_at x, (y - 1)
    left = height_at (x - 1), y
    (top.nil? || top > self_height) &&
      (right.nil? || right > self_height) &&
      (bottom.nil? || bottom > self_height) &&
      (left.nil? || left > self_height)
  end

  def low_points
    r = {}
    (0...col_count).each do |x|
      (0...row_count).each do |y|
        r["#{x}##{y}"] = height_at x, y if low_point? x, y
      end
    end
    r
  end
end

input_lines = File.readlines 'input/data.txt'
height_map = HeightMap.parse input_lines.map(&:strip)

low_points = height_map.low_points
puts low_points
puts low_points.values.map { |v| v + 1 }.sum
